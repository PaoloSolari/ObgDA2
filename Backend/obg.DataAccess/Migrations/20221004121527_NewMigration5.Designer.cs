// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using obg.DataAccess.Context;

namespace obg.DataAccess.Migrations
{
    [DbContext(typeof(ObgContext))]
    [Migration("20221004121527_NewMigration5")]
    partial class NewMigration5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("obg.Domain.Entities.Demand", b =>
                {
                    b.Property<string>("IdDemand")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdDemand");

                    b.HasIndex("PharmacyName");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("obg.Domain.Entities.Invitation", b =>
                {
                    b.Property<string>("IdInvitation")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserCode")
                        .HasColumnType("int");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("IdInvitation", "UserCode");

                    b.HasIndex("PharmacyName");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("obg.Domain.Entities.Medicine", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Prescription")
                        .HasColumnType("bit");

                    b.Property<int>("Presentation")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("SymtompsItTreats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("PharmacyName");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("obg.Domain.Entities.Petition", b =>
                {
                    b.Property<string>("IdPetition")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DemandIdDemand")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.HasKey("IdPetition");

                    b.HasIndex("DemandIdDemand");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("obg.Domain.Entities.Pharmacy", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministratorName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("AdministratorName");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("obg.Domain.Entities.Purchase", b =>
                {
                    b.Property<string>("IdPurchase")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPurchase");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("obg.Domain.Entities.PurchaseLine", b =>
                {
                    b.Property<string>("IdPurchaseLine")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineQuantity")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseIdPurchase")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPurchaseLine");

                    b.HasIndex("PurchaseIdPurchase");

                    b.ToTable("PurchaseLines");
                });

            modelBuilder.Entity("obg.Domain.Entities.Session", b =>
                {
                    b.Property<string>("IdSession")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSession");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("obg.Domain.Entities.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("obg.Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("obg.Domain.Entities.User");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("obg.Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("obg.Domain.Entities.User");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PharmacyName");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("obg.Domain.Entities.Owner", b =>
                {
                    b.HasBaseType("obg.Domain.Entities.User");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PharmacyName");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("obg.Domain.Entities.Demand", b =>
                {
                    b.HasOne("obg.Domain.Entities.Pharmacy", null)
                        .WithMany("Demands")
                        .HasForeignKey("PharmacyName");
                });

            modelBuilder.Entity("obg.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("obg.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyName");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("obg.Domain.Entities.Medicine", b =>
                {
                    b.HasOne("obg.Domain.Entities.Pharmacy", null)
                        .WithMany("Medicines")
                        .HasForeignKey("PharmacyName");
                });

            modelBuilder.Entity("obg.Domain.Entities.Petition", b =>
                {
                    b.HasOne("obg.Domain.Entities.Demand", null)
                        .WithMany("Petitions")
                        .HasForeignKey("DemandIdDemand");
                });

            modelBuilder.Entity("obg.Domain.Entities.Pharmacy", b =>
                {
                    b.HasOne("obg.Domain.Entities.Administrator", null)
                        .WithMany("Pharmacies")
                        .HasForeignKey("AdministratorName");
                });

            modelBuilder.Entity("obg.Domain.Entities.PurchaseLine", b =>
                {
                    b.HasOne("obg.Domain.Entities.Purchase", null)
                        .WithMany("PurchaseLines")
                        .HasForeignKey("PurchaseIdPurchase");
                });

            modelBuilder.Entity("obg.Domain.Entities.Administrator", b =>
                {
                    b.HasOne("obg.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("obg.Domain.Entities.Administrator", "Name")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("obg.Domain.Entities.Employee", b =>
                {
                    b.HasOne("obg.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("obg.Domain.Entities.Employee", "Name")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("obg.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyName");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("obg.Domain.Entities.Owner", b =>
                {
                    b.HasOne("obg.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("obg.Domain.Entities.Owner", "Name")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("obg.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyName");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("obg.Domain.Entities.Demand", b =>
                {
                    b.Navigation("Petitions");
                });

            modelBuilder.Entity("obg.Domain.Entities.Pharmacy", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("obg.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseLines");
                });

            modelBuilder.Entity("obg.Domain.Entities.Administrator", b =>
                {
                    b.Navigation("Pharmacies");
                });
#pragma warning restore 612, 618
        }
    }
}
